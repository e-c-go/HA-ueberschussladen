blueprint:
  name: Solarüberschussladen des Warmwasserboilers
  description: >
    Steuerung des Warmwasserboilers basierend auf Solarüberschuss und Batterieladezustand.
  domain: automation
  input:
    legionella_temperature:
      name: Legionellen Temperatur
      selector:
        entity:
          domain: input_number
    normal_temperature:
      name: Normale Temperatur
      selector:
        entity:
          domain: input_number
    min_temperature:
      name: Minimale Temperatur
      selector:
        entity:
          domain: input_number
      default: null
    shelly_phase_1:
      name: Shelly Phase 1
      selector:
        entity:
          domain: switch
    shelly_phase_2:
      name: Shelly Phase 2
      selector:
        entity:
          domain: switch
    shelly_phase_3:
      name: Shelly Phase 3
      selector:
        entity:
          domain: switch
    current_boiler_temperature:
      name: Aktuelle Boilertemperatur
      selector:
        entity:
          domain: sensor
    power_per_stage:
      name: Leistung je Stufe
      selector:
        entity:
          domain: input_number
    min_stage:
      name: Minimale Stufe
      selector:
        entity:
          domain: input_number
    last_boiler_charge:
      name: Letzte Boilerladung
      selector:
        entity:
          domain: input_datetime
    min_battery_charge:
      name: Minimaler Batterieladestand
      selector:
        entity:
          domain: input_number
    current_battery_soc:
      name: Aktueller SoC der Batterie
      selector:
        entity:
          domain: sensor
    battery_charge_discharge_power:
      name: Lade-Entladeleistung der Batterie
      selector:
        entity:
          domain: sensor
    grid_feed_in_power:
      name: Netzeinspeisung in W
      selector:
        entity:
          domain: sensor
    boiler_surplus_charging_active:
      name: Boiler Überschussladen aktiv
      selector:
        entity:
          domain: input_boolean
    min_solar_share:
      name: Minimaler Solaranteil in %
      selector:
        entity:
          domain: input_number
    boiler_time_controlled_charging_active:
      name: Boilerladung zeigesteuert aktiv
      selector:
        entity:
          domain: input_boolean
    last_legionella_run:
      name: Letzte Legionellenladung
      selector:
        entity:
          domain: input_datetime

trigger:
  - platform: time_pattern
    seconds: "/30"

condition: []

action:
  - choose:
      - conditions:
          # Prüfen, ob die letzte Boilerladung gestern oder länger zurückliegt
          - condition: template
            value_template: >
              {{ as_datetime(states('!input.last_boiler_charge')).date() < now().date() }}
        sequence:
          - choose:
              - conditions:
                  # Prüfen, ob die zeitgesteuerte Ladung aktiv ist
                  - condition: state
                    entity_id: !input.boiler_time_controlled_charging_active
                    state: "on"
                sequence:
                  # Keine Aktion, wenn die zeitgesteuerte Ladung aktiv ist
                  - service: persistent_notification.create
                    data:
                      title: "DEBUG: Zeitgesteuerte Ladung"
                      message: "Die zeitgesteuerte Ladung ist aktiv und wird nicht beeinträchtigt."
                default:
                # Prüfen, ob das Überschussladen aktiv ist
                - choose:
                    - conditions:
                        - condition: state
                          entity_id: !input.boiler_surplus_charging_active
                          state: "off"
                      sequence:
                        # Überschussladen starten
                        - service: input_boolean.turn_on
                          target:
                            entity_id: !input.boiler_surplus_charging_active
                        - choose:
                            - conditions:
                                # Prüfen, ob die letzte Legionellenladung länger als die Periodizität zurückliegt
                                - condition: template
                                  value_template: >
                                    {% set letztes_datum = states('!input.last_legionella_run') %}
                                    {% set periodizitat = states('!input.legionella_period') | float(0) %}
                                    {% if letztes_datum not in ['unknown', 'none', 'unavailable'] and periodizitat > 0 %}
                                      {{ (now().date() - as_datetime(letztes_datum).date()).days > periodizitat }}
                                    {% else %}
                                      false
                                    {% endif %}
                              sequence:
                                # Zieltemperatur auf Legionellentemperatur setzen
                                - service: input_number.set_value
                                  target:
                                    entity_id: !input.target_temperature
                                  data:
                                    value: "{{ states('!input.legionella_temperature') | float }}"
                              default:
                              # Zieltemperatur auf Normaltemperatur setzen
                              - service: input_number.set_value
                                target:
                                  entity_id: !input.target_temperature
                                data:
                                  value: "{{ states('!input.normal_temperature') | float }}"
                        # Boilerphasen entsprechend der minimalen Leistungstufe einschalten
                        - choose:
                            - conditions:
                                - condition: template
                                  value_template: >
                                    {{ states('!input.min_stage') | int >= 3 }}
                              sequence:
                                - service: switch.turn_on
                                  target:
                                    entity_id: !input.shelly_phase_3
                            - conditions:
                                - condition: template
                                  value_template: >
                                    {{ states('!input.min_stage') | int >= 2 }}
                              sequence:
                                - service: switch.turn_on
                                  target:
                                    entity_id: !input.shelly_phase_2
                            - conditions:
                                - condition: template
                                  value_template: >
                                    {{ states('!input.min_stage') | int >= 1 }}
                              sequence:
                                - service: switch.turn_on
                                  target:
                                    entity_id: !input.shelly_phase_1
                        # Warten, bis die Zieltemperatur erreicht ist
                        - wait_template: >
                            {{ states('!input.current_boiler_temperature') | float >= states('!input.target_temperature') | float }}
                        # Boilerphasen ausschalten
                        - service: switch.turn_off
                          target:
                            entity_id:
                              - !input.shelly_phase_1
                              - !input.shelly_phase_2
                              - !input.shelly_phase_3
                        # Überschussladen deaktivieren
                        - service: input_boolean.turn_off
                          target:
                            entity_id: !input.boiler_surplus_charging_active
                        # Datum der letzten Boilerladung setzen
                        - service: input_datetime.set_datetime
                          target:
                            entity_id: !input.last_boiler_charge
                          data:
                            datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
                        # Falls es eine Legionellenladung war, auch dieses Datum setzen
                        - choose:
                            - conditions:
                                - condition: template
                                  value_template: >
                                    {{ states('!input.target_temperature') | float == states('!input.legionella_temperature') | float }}
                              sequence:
                                - service: input_datetime.set_datetime
                                  target:
                                    entity_id: !input.last_legionella_run
                                  data:
                                    datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"

mode: single
