blueprint:
  name: Solarüberschussladen des Warmwasserboilers
  description: >
    Steuerung des Warmwasserboilers basierend auf Solarüberschuss und Batterieladezustand.
  domain: automation
  input:
    legionella_temperature:
      name: Legionellen Temperatur
      selector:
        entity:
          domain: input_number
      default: null
    normal_temperature:
      name: Normale Temperatur
      selector:
        entity:
          domain: input_number
      default: null
    min_temperature:
      name: Minimale Temperatur
      selector:
        entity:
          domain: input_number
      default: null
    shelly_phase_1:
      name: Shelly Phase 1
      selector:
        entity:
          domain: switch
      default: null
    shelly_phase_2:
      name: Shelly Phase 2
      selector:
        entity:
          domain: switch
      default: null
    shelly_phase_3:
      name: Shelly Phase 3
      selector:
        entity:
          domain: switch
      default: null
    current_boiler_temperature:
      name: Aktuelle Boilertemperatur
      selector:
        entity:
          domain: sensor
      default: null
    power_per_stage:
      name: Leistung je Stufe
      selector:
        entity:
          domain: input_number
      default: null
    min_stage:
      name: Minimale Stufe
      selector:
        entity:
          domain: input_number
      default: null
    last_boiler_charge:
      name: Letzte Boilerladung
      selector:
        entity:
          domain: input_datetime
      default: null
    min_battery_charge:
      name: Minimaler Batterieladestand
      selector:
        entity:
          domain: input_number
      default: input_number.default_min_battery_charge
    current_battery_soc:
      name: Aktueller SoC der Batterie
      selector:
        entity:
          domain: sensor
      default: sensor.default_current_battery_soc
    battery_charge_discharge_power:
      name: Lade-Entladeleistung der Batterie
      selector:
        entity:
          domain: sensor
      default: null
    grid_feed_in_power:
      name: Netzeinspeisung in W
      selector:
        entity:
          domain: sensor
      default: null
    boiler_surplus_charging_active:
      name: Boiler Überschussladen aktiv
      selector:
        entity:
          domain: input_boolean
      default: input_boolean.boiler_surplus_charging_active
    min_solar_share:
      name: Minimaler Solaranteil in %
      selector:
        entity:
          domain: input_number
      default: input_number.default_min_solar_share
    boiler_time_controlled_charging_active:
      name: Boilerladung zeigesteuert aktiv
      selector:
        entity:
          domain: input_boolean
      default: input_boolean.boiler_time_controlled_charging_active
    last_legionella_run:
      name: Letzte Legionellenladung
      selector:
        entity:
          domain: input_datetime
      default: null
    boiler_surplus_charging_switch:
      name: Boiler Überschussladen
      selector:
        entity:
          domain: input_boolean
      default: input_boolean.boiler_surplus_charging_switch
    solar_generation:
      name: Solarerzeugung in W
      selector:
        entity:
          domain: sensor
          device_class: power
      default: sensor.default_solar_generation

variables:
  current_battery_soc: !input current_battery_soc
  min_battery_charge: !input min_battery_charge
  power_per_stage: !input power_per_stage
  min_stage: !input min_stage
  battery_charge_discharge_power: !input battery_charge_discharge_power
  grid_feed_in_power: !input grid_feed_in_power

  min_power_per_stage_value: "{{ states(power_per_stage) | float(0) }}"
  min_stage_value: "{{ states(min_stage) | float(0) }}"
  required_power: "{{ min_power_per_stage_value * min_stage_value }}"

  available_power: >-
    {% set grid = states(grid_feed_in_power) | float(0) %}
    {% set batt = states(battery_charge_discharge_power) | float(0) %}
    {{
      max(0, grid + max(0, 0 - batt))
    }}


  battery_soc: "{{ states(current_battery_soc) | float(0) }}"
  min_battery_soc: "{{ states(min_battery_charge) | float(0) }}"

trigger:
  - platform: time_pattern
    seconds: "/30"

condition:
  - condition: and
    conditions:
      - condition: state
        entity_id: !input boiler_surplus_charging_switch
        state: "on"
      - condition: state
        entity_id: !input boiler_time_controlled_charging_active
        state: "off"
      - condition: state
        entity_id: !input boiler_surplus_charging_active
        state: "off"
      - condition: template
        value_template: >
          {{ battery_soc > min_battery_soc }}
      - condition: template
        value_template: >
          {{ available_power > required_power }}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ battery_soc > min_battery_soc }}
          #- condition: template
          #  value_template: >
          #    {{ available_power > required_power }}

        sequence:
          - service: persistent_notification.create
            data:
              title: "Boiler: Überschussprüfung"
              message: >
                ✅ Voraussetzungen erfüllt  
                🔋 Batterie-SoC: {{ battery_soc }} % (min: {{ min_battery_soc }} %)  
                ⚡ Verfügbare Leistung: {{ available_power | round(1) }} W  
                🔌 Benötigte Leistung: {{ required_power | round(1) }} W  
                🌐 Netz-Einspeisung: {{ states(grid_feed_in_power) }} W  
                🔋 Batterie-Leistung: {{ states(battery_charge_discharge_power) }} W

mode: single
