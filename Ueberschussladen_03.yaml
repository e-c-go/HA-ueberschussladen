blueprint:
  name: Dynamische Wallbox-Ladesteuerung (FINALER FIX)
  description: > 
    Automatische Anpassung des Ladestroms basierend auf PV-Überschuss, Batteriestatus und Netzbezug.
    Ladung startet nur, wenn genügend Energie vorhanden ist.

  domain: automation
  homeassistant:
    min_version: "2023.12.0"

  input:
    min_charge_current:
      name: Minimaler Ladestrom (A)
      default: 6
      selector:
        number:
          min: 0
          max: 10
          unit_of_measurement: "A"
          mode: slider
          step: 1
    max_charge_current:
      name: Maximaler Ladestrom (A)
      default: 16
      selector:
        number:
          min: 6
          max: 32
          unit_of_measurement: "A"
          mode: slider
          step: 1
    min_battery_soc:
      name: Minimaler Batterieladestand (%)
      default: 20
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          mode: slider
          step: 1
    min_feed_in_power:
      name: Mindest-Netzeinspeisung (W)
      default: 500
      selector:
        number:
          min: 0
          max: 5000
          unit_of_measurement: "W"
          mode: slider
          step: 50
    min_charge_power:
      name: Minimale Ladeleistung (W)
      default: 1000
      selector:
        number:
          min: 0
          max: 11000
          unit_of_measurement: "W"
          mode: slider
          step: 100
        net_power:
      name: Netzeinspeisung/-bezug (W) [Einzelwert]
      default: ""
      selector:
        entity:
          domain: sensor
          device_class: power
    invert_net_value:
      name: Vorzeichen umkehren (nur für Einzelwert)
      default: false
      selector:
        boolean:
    net_export:
      name: Netzeinspeisung (W) [Getrennte Werte]
      default: ""
      selector:
        entity:
          domain: sensor
          device_class: power

    net_import:
      name: Netzbezug (W) [Getrennte Werte]
      default: ""
      selector:
        entity:
          domain: sensor
          device_class: power
    charger_power:
      name: Aktuelle Ladeleistung (W)
      selector:
        entity:
          domain: sensor
          device_class: power
    charger_current:
      name: Aktueller Ladestrom (A)
      selector:
        entity:
          domain: number
    automation_switch:
      name: Automatisierungsschalter
      selector:
        entity:
          domain: input_boolean
    house_consumption:
      name: Hausverbrauch (W)
      selector:
        entity:
          domain: sensor
          device_class: power
    pv_power:
      name: PV-Leistung (W)
      selector:
        entity:
          domain: sensor
          device_class: power
    charger_status:
      name: Wallbox Status / Mode
      selector:
        entity:
          domain: sensor

variables:
  min_feed_in: !input min_feed_in_power
  min_charge: !input min_charge_power
  max_current: !input max_charge_current
  min_current: !input min_charge_current

trigger:
  - platform: state
    entity_id: !input charger_status
    to: "Waiting"
  - platform: state
    entity_id: !input charger_status
    to: "Charging"
  - platform: time_pattern
    seconds: "/30"

condition:
  - condition: state
    entity_id: !input automation_switch
    state: "on"
  - condition: numeric_state
    entity_id: !input min_battery_soc
    above: !input min_battery_soc
  - condition: state
    entity_id: !input charger_status
    state: "Waiting"

action:
  - service: number.set_value
    target:
      entity_id: !input charger_current
    data:
      value: >
        {% if !input net_power != "" %}
          {% set net_power = states(!input net_power | string) | float(0) %}
          {% if is_state('!input invert_net_value', 'on') %}
            {% set net_power = net_power * -1 %}
          {% endif %}
          {% set available_power = net_power %}
        {% elif !input net_export != "" and !input net_import != "" %}
          {% set net_export = states(!input net_export | string) | float(0) %}
          {% set net_import = states(!input net_import | string) | float(0) %}
          {% set available_power = net_export - net_import %}
        {% else %}
          {% set available_power = states(!input pv_power | string) | float(0) - states(!input house_consumption | string) | float(0) %}
        {% endif %}

        {% if available_power < min_feed_in or available_power < min_charge %}
          0  # Stoppt das Laden, wenn zu wenig Energie verfügbar ist
        {% else %}
          {% set new_current = (available_power / 219) | round(0) %}
          {% if new_current > max_current %}
            {{ max_current }}
          {% elif new_current < min_current %}
            {{ min_current }}
          {% else %}
            {{ new_current }}
          {% endif %}
        {% endif %}
