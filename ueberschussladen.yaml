blueprint:
  name: Dynamische Wallbox-Ladesteuerung
  description: > 
    Automatische Anpassung des Ladestroms basierend auf PV-Überschuss, Batteriestatus und Netzbezug.
    Du kannst entweder eine einzelne Netzeinspeisungs-Entität oder getrennte Werte für Bezug & Einspeisung eingeben.
  domain: automation
  homeassistant:
    min_version: "2023.12.0"
  input:
    min_charge_current:
      name: Minimaler Ladestrom (A)
      default: 6
      selector:
        number:
          min: 0
          max: 10
          unit_of_measurement: "A"
          mode: slider
          step: 1
    max_charge_current:
      name: Maximaler Ladestrom (A)
      default: 16
      selector:
        number:
          min: 6
          max: 32
          unit_of_measurement: "A"
          mode: slider
          step: 1
    charger_current:
      name: Aktueller Ladestrom (A)
      selector:
        entity:
          domain: number
          multiple: false
    net_power:
      name: Netzeinspeisung/-bezug (W) [Einzelwert]
      selector:
        entity:
          domain: sensor
          device_class: power
          multiple: false
      default: null
    invert_net_value:
      name: Vorzeichen umkehren (nur für Einzelwert)
      default: false
      selector:
        boolean:
    net_export:
      name: Netzeinspeisung (W) [Getrennte Werte]
      selector:
        entity:
          domain: sensor
          device_class: power
          multiple: false
      default: null
    net_import:
      name: Netzbezug (W) [Getrennte Werte]
      selector:
        entity:
          domain: sensor
          device_class: power
          multiple: false
      default: null
    automation_switch:
      name: Automatisierungsschalter
      selector:
        entity:
          domain: input_boolean
    house_consumption:
      name: Hausverbrauch (W)
      selector:
        entity:
          domain: sensor
          device_class: power
          multiple: false
    pv_power:
      name: PV-Leistung (W)
      selector:
        entity:
          domain: sensor
          device_class: power
          multiple: false
    charger_status:
      name: Wallbox Status / Mode
      selector:
        entity:
          domain: sensor
          multiple: false

trigger:
  - platform: state
    entity_id: !input charger_status
    to: "Waiting"
  - platform: time_pattern
    seconds: "/30"

variables:
  min_current: "{{ iif(!input min_charge_current is defined, 6, !input min_charge_current) }}"
  max_current: "{{ iif(!input max_charge_current is defined, 16, !input max_charge_current) }}"
  net_power_entity: "{{ !input net_power if !input net_power is defined else none }}"
  net_export_entity: "{{ !input net_export if !input net_export is defined else none }}"
  net_import_entity: "{{ !input net_import if !input net_import is defined else none }}"
  house_consumption_entity: "{{ !input house_consumption if !input house_consumption is defined else none }}"
  pv_power_entity: "{{ !input pv_power if !input pv_power is defined else none }}"
  invert_net_value: "{{ !input invert_net_value if !input invert_net_value is defined else false }}"

  net_power: "{{ states(net_power_entity) | float(0) if net_power_entity else 0 }}"
  net_export: "{{ states(net_export_entity) | float(0) if net_export_entity else 0 }}"
  net_import: "{{ states(net_import_entity) | float(0) if net_import_entity else 0 }}"
  house_consumption: "{{ states(house_consumption_entity) | float(0) if house_consumption_entity else 0 }}"
  pv_power: "{{ states(pv_power_entity) | float(0) if pv_power_entity else 0 }}"
  
  conversion_factor: 219

  adjusted_net_power: "{{ net_power * -1 if invert_net_value == 'true' else net_power }}"

  available_power: "{{ adjusted_net_power if net_power_entity else (net_export - net_import) if net_export_entity and net_import_entity else (pv_power - house_consumption) }}"

  new_current: "{{ (available_power / conversion_factor) | round(0) }}"

  final_current: "{{ max_current if new_current > max_current else min_current if new_current < min_current else new_current }}"

condition:
  - condition: state
    entity_id: !input automation_switch
    state: "on"
  - condition: state
    entity_id: !input charger_status
    state: "Waiting"

action:
  - service: number.set_value
    target:
      entity_id: !input charger_current
    data:
      value: "{{ final_current }}"
